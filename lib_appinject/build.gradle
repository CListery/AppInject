apply from: "${project.rootDir}/common.gradle"

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion buildVersionInt

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode VERSION_CODE
        versionName VERSION_NAME

        buildConfigField('int', 'LOG_METHOD_COUNT', '2')
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
}

task androidJavadocs(type: Javadoc) {
    options.encoding "UTF-8"
    options.charSet 'UTF-8'
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.links("http://docs.oracle.com/javase/7/docs/api/")
    options.linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
    excludes = ['**/*.kt', '**/BuildConfig.java', '**/R.java']
    failOnError = false
}

task dokkaJavadoc(overwrite: true, type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = androidJavadocs.destinationDir
    includeNonPublic = true
    skipEmptyPackages = true
    noStdlibLink = true
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier "sources"
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

//apply from: 'publish-bintray.gradle'
apply from: 'publish-artifactory.gradle'